generator client {
  provider = "prisma-client-js"
  output   = "."
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Continent {
  id   Int    @id
  name String

  AreaPOI           AreaPOI[]
  AreaTable         AreaTable[]
  WorldMapArea      WorldMapArea[]
  WorldMapContinent WorldMapContinent[]
  AreaTrigger       AreaTrigger[]
  Light             Light[]
}

model AreaPOI {
  id               Int       @id
  importance       Int
  icon             Int
  factionId        Int
  x                Float
  y                Float
  z                Float
  continentId      Int
  continent        Continent @relation(fields: [continentId], references: [id])
  flags            Int
  areaId           Int
  area             AreaTable @relation(fields: [areaId], references: [id])
  name_enUS        String
  name_enGB        String
  name_koKR        String
  name_frFR        String
  name_deDE        String
  name_enCN        String
  name_zhCN        String
  name_enTW        String
  nameMask         Int
  description_enUS String
  description_enGB String
  description_koKR String
  description_frFR String
  description_deDE String
  description_enCN String
  description_zhCN String
  description_enTW String
  descriptionMask  Int
  worldStateId     Int
}

model AreaTable {
  id                          Int       @id
  continentId                 Int
  continent                   Continent @relation(fields: [continentId], references: [id])
  parentAreaId                Int
  parentArea                  AreaTable @relation("ParentRelation", fields: [parentAreaId], references: [id])
  areaBit                     Int
  flags                       Int
  soundPreferenceId           Int
  underwaterSoundPreferenceId Int
  soundAmbienceId             Int
  zoneMusicId                 Int
  zoneIntroMusicId            Int
  explorationLevel            Int
  name_enUS                   String
  name_enGB                   String
  name_koKR                   String
  name_frFR                   String
  name_deDE                   String
  name_enCN                   String
  name_zhCN                   String
  name_enTW                   String
  nameMask                    Int
  factionGroupMask            Int
  liquidTypeId                Int
  minElevation                Float
  ambientMultiplier           Float
  lightId                     Int
  light                       Light     @relation(fields: [lightId], references: [id])

  ChildAreas       AreaTable[]       @relation("ParentRelation")
  AreaPOI          AreaPOI[]
  WMOAreaTable     WMOAreaTable[]
  WorldMapArea     WorldMapArea[]
  WorldMapOverlay1 WorldMapOverlay[] @relation("Overlay1")
  WorldMapOverlay2 WorldMapOverlay[] @relation("Overlay2")
  WorldMapOverlay3 WorldMapOverlay[] @relation("Overlay3")
  WorldMapOverlay4 WorldMapOverlay[] @relation("Overlay4")
}

model AreaTrigger {
  id          Int       @id
  continentId Int
  continent   Continent @relation(fields: [continentId], references: [id])
  x           Float
  y           Float
  z           Float
  radius      Float
  boxLength   Float
  boxWidth    Float
  boxHeight   Float
  boxYaw      Float
}

model CreatureDisplayInfoExtra {
  id               Int    @id
  displayRaceId    Int
  displaySexId     Int
  skinId           Int
  faceId           Int
  hairStyleId      Int
  hairColorId      Int
  facialHairId     Int
  itemDisplayId_1  Int
  itemDisplayId_2  Int
  itemDisplayId_3  Int
  itemDisplayId_4  Int
  itemDisplayId_5  Int
  itemDisplayId_6  Int
  itemDisplayId_7  Int
  itemDisplayId_8  Int
  itemDisplayId_9  Int
  itemDisplayId_10 Int
  bakeName         String
}

model Light {
  id                Int         @id
  continentId       Int
  continent         Continent   @relation(fields: [continentId], references: [id])
  x                 Float
  y                 Float
  z                 Float
  falloffStart      Float
  falloffEnd        Float
  paramStandardId   Int
  paramStandard     LightParams @relation("standard", fields: [paramStandardId], references: [id])
  paramUnderwaterId Int
  paramUnderwater   LightParams @relation("underwater", fields: [paramUnderwaterId], references: [id])
  paramSunsetId     Int
  paramSunset       LightParams @relation("sunset", fields: [paramSunsetId], references: [id])
  paramOtherId      Int
  paramOther        LightParams @relation("other", fields: [paramOtherId], references: [id])
  paramDeathId      Int
  paramDeath        LightParams @relation("death", fields: [paramDeathId], references: [id])

  AreaTable AreaTable[]
}

model LightParams {
  id                Int         @id
  highlightSky      Int
  lightSkyboxId     Int
  lightSkybox       LightSkybox @relation(fields: [lightSkyboxId], references: [id])
  glow              Float
  waterShallowAlpha Float
  waterDeepAlpha    Float
  oceanShallowAlpha Float
  oceanDeepAlpha    Float
  flags             Int

  standatrdLight  Light[] @relation("standard")
  underwaterLight Light[] @relation("underwater")
  sunsetLight     Light[] @relation("sunset")
  otherLight      Light[] @relation("other")
  deathLight      Light[] @relation("death")
}

model LightSkybox {
  id   Int    @id
  name String

  LightParams LightParams[]
}

model WMOAreaTable {
  id                        Int       @id
  wmoId                     Int
  nameSetId                 Int
  wmoGroupId                Int
  soundProviderId           Int
  underwaterSoundProviderId Int
  ambienceId                Int
  zoneMusicId               Int
  introSoundId              Int
  flags                     Int
  areaTableId               Int
  areaTable                 AreaTable @relation(fields: [areaTableId], references: [id])
  name_enUS                 String
  name_enGB                 String
  name_koKR                 String
  name_frFR                 String
  name_deDE                 String
  name_enCN                 String
  name_zhCN                 String
  name_enTW                 String
  nameMask                  Int
}

model WorldMapArea {
  id          Int       @id @default(autoincrement())
  continentId Int
  continent   Continent @relation(fields: [continentId], references: [id])
  areaId      Int
  areaTable   AreaTable @relation(fields: [areaId], references: [id])
  name        String
  locLeft     Float
  locRight    Float
  locTop      Float
  locBottom   Float

  WorldMapOverlay WorldMapOverlay[]
}

model WorldMapContinent {
  id          Int       @id
  continentId Int
  continent   Continent @relation(fields: [continentId], references: [id])
  left        Int
  right       Int
  top         Int
  bottom      Int
  offsetX     Float
  offsetY     Float
  scale       Float
  taxiMinX    Int
  taxiMinY    Int
  taxiMaxX    Int
  taxiMaxY    Int
}

model WorldMapOverlay {
  id             Int          @id
  worldMapAreaId Int
  mapArea        WorldMapArea @relation(fields: [worldMapAreaId], references: [id])
  areaId_1       Int
  area_1         AreaTable    @relation("Overlay1", fields: [areaId_1], references: [id])
  areaId_2       Int
  area_2         AreaTable    @relation("Overlay2", fields: [areaId_2], references: [id])
  areaId_3       Int
  area_3         AreaTable    @relation("Overlay3", fields: [areaId_3], references: [id])
  areaId_4       Int
  area_4         AreaTable    @relation("Overlay4", fields: [areaId_4], references: [id])
  mapPointX      Int
  mapPointY      Int
  texture        String
  textureWidth   Int
  textureHeight  Int
  offsetX        Int
  offsetY        Int
  hitRectTop     Int
  hitRectLeft    Int
  hitRectBottom  Int
  hitRectRight   Int
}
